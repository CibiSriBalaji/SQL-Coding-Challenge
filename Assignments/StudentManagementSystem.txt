use sisdb;


show tables;


-- Task 1: Insert sample records into each of the following tables.


insert into students (first_name, last_name, date_of_birth, email, phone_number) 
values 
('leonard', 'hofstadter', '1980-05-04', 'leonard@example.com', 1234567890),
('sheldon', 'cooper', '1979-02-03', 'sheldon@example.com', 9876543210),
('penny', 'hofstadter', '1985-12-11', 'penny@example.com', 5551244421),
('howard', 'wolowitz', '1981-03-04', 'howard@example.com', 9998812345),
('rajesh', 'koothrappali', '1981-10-08', 'rajesh@example.com', 9898911123);




insert into teacher (first_name, last_name, email)
values
('albert', 'einstein', 'einstein@example.com'),
('isaac', 'newton', 'newton@example.com'),
('galileo', 'galilei', 'galileo@example.com'),
('stephen', 'hawking', 'hawking@example.com');


insert into courses (course_name, credits, teacher_id) 
values 
('physics', 3, 1),
('engineering', 4, 2),
('astronomy', 3, 3),
('experimental physics', 5, 1),
('quantum mechanics', 3, 2),
('chemistry',4,2);


insert into enrollment (students_id, courses_id, enrollment_date)
values
(1, 1, '2024-01-10'),
(2, 3, '2024-01-12'),
(3, 2, '2024-01-15'),
(4, 5, '2024-01-20'),
(5, 4, '2024-01-22'),
(2, 5, '2024-01-22');




insert into payments (amount, payment_date, students_id)
values
(10000, '2024-01-20', 1),
(15000, '2024-01-25', 2),
(12000, '2024-02-01', 3),
(8000, '2024-02-05', 4),
(16000, '2024-02-10', 5),
(2000, '2024-03-25', 2);




select * from payments;




/*TASK 2
1. Write an SQL query to insert a new student into the "Students" table with the following details:
First Name: John
Last Name: Doe
Date of Birth: 1995-08-15
Email: john.doe@example.com
Phone Number: 1234567890


o/p:
'1','leonard','hofstadter','1980-05-04','leonard@example.com','1234567890'
'2','sheldon','cooper','1979-02-03','sheldon@example.com','9876543210'
'3','penny','hofstadter','1985-12-11','penny@example.com','5551244421'
'4','howard','wolowitz','1981-03-04','howard@example.com','9998812345'
'5','rajesh','koothrappali','1981-10-08','rajesh@example.com','9898911123'
'6','john','doe','1995-08-15','john.doe@example.com','1234567899'
*/


insert into students (first_name, last_name, date_of_birth, email, phone_number) 
values ('john', 'doe', '1995-08-15', 'john.doe@example.com', 1234567899);




/*
2. Write an SQL query to enroll a student in a course. Choose an existing student and course 
and insert a record into the "Enrollments" table with the enrollment date.


o/p:
'1','1','1','2024-01-10'
'2','2','3','2024-01-12'
'3','3','2','2024-01-15'
'4','4','5','2024-01-20'
'5','5','4','2024-01-22'
'6','2','5','2024-01-22'
'7','1','2','2024-03-01'


*/
insert into enrollment (students_id, courses_id, enrollment_date)
values (1, 2, '2024-03-01');


/*
3. Update the email address of a specific teacher in the "Teacher" table. Choose any teacher 
and modify their email address.


o/p: 
'1','albert','einstein','albert@example.com'
'2','isaac','newton','newton@example.com'
'3','galileo','galilei','galileo@example.com'
'4','stephen','hawking','hawking@example.com'


*/


update teacher
set email = 'albert@example.com'
where id = 1;


/*
4. Write an SQL query to delete a specific enrollment record from the "Enrollments" table. 
Select an enrollment record based on the student and course.


o/p:
'1','1','1','2024-01-10'
'2','2','3','2024-01-12'
'3','3','2','2024-01-15'
'4','4','5','2024-01-20'
'5','5','4','2024-01-22'
'6','2','5','2024-01-22'


*/
delete from enrollment
where students_id = 1 and courses_id = 2;


/*
5. Update the "Courses" table to assign a specific teacher to a course. Choose any course 
and teacher from the respective tables.


o/p:
'1','physics','3','3'
'2','engineering','4','2'
'3','astronomy','3','3'
'4','experimental physics','5','1'
'5','quantum mechanics','3','2'
'6','chemistry','4','2'


*/
update courses
set teacher_id = 3
where id = 1;


/*
6. Delete a specific student from the "Students" table and remove all their enrollment records 
from the "Enrollments" table. Be sure to maintain referential integrity.


o/p:
'1','leonard','hofstadter','1980-05-04','leonard@example.com','1234567890'
'2','sheldon','cooper','1979-02-03','sheldon@example.com','9876543210'
'3','penny','hofstadter','1985-12-11','penny@example.com','5551244421'
'4','howard','wolowitz','1981-03-04','howard@example.com','9998812345'
'5','rajesh','koothrappali','1981-10-08','rajesh@example.com','9898911123'


*/


delete from students
where id = 6;




/*
7. Update the payment amount for a specific payment record in the "Payments" table. Choose 
any payment record and modify the payment amount.


o/p: 
'1','11000','2024-01-20','1'
'2','15000','2024-01-25','2'
'3','12000','2024-02-01','3'
'4','8000','2024-02-05','4'
'5','16000','2024-02-10','5'
'6','1000','2024-03-25','2'


*/
update payments
set amount = 11000
where id = 1;




/*TASK 3
1. Write an SQL query to calculate the total payments made by a specific student. 
You will need to join the "Payments" table with the "Students" table based on the student's ID.


o/p: '17000'
*/
select sum(amount) as total_payments
from payments
where students_id = 2;


/*
2. Write an SQL query to retrieve a list of courses along with the count of students enrolled in each course. 
Use a JOIN operation between the "Courses" table and the "Enrollments" table.


o/p: 
'physics','1'
'engineering','1'
'astronomy','1'
'experimental physics','1'
'quantum mechanics','2'


*/
select c.course_name, count(e.students_id) as count_of_students_enrolled
from courses c
join enrollment e on c.id = e.courses_id
group by c.course_name;


/*
3. Write an SQL query to find the names of students who have not enrolled in any course. Use a LEFT JOIN between the "Students" table and 
the "Enrollments" table to identify students without enrollments.


o/p: 
'john','doe'


*/
select s.first_name, s.last_name
from students s
left join enrollment e on s.id = e.students_id
where e.students_id is null;


/*
4. Write an SQL query to retrieve the first name, last name of students, and the names of the courses they are enrolled in. 
Use JOIN operations between the "Students" table and the "Enrollments" and "Courses" tables.


o/p: 
'leonard','hofstadter','physics'
'sheldon','cooper','astronomy'
'sheldon','cooper','quantum mechanics'
'penny','hofstadter','engineering'
'howard','wolowitz','quantum mechanics'
'rajesh','koothrappali','experimental physics'


*/
select s.first_name, s.last_name, c.course_name
from students s
join enrollment e on s.id = e.students_id
join courses c on e.courses_id = c.id;


/*
5. Create a query to list the names of teachers and the courses they are assigned to. Join the "Teacher" table with the "Courses" table.


o/p: 
'albert','einstein','experimental physics'
'isaac','newton','engineering'
'isaac','newton','quantum mechanics'
'isaac','newton','chemistry'
'galileo','galilei','physics'
'galileo','galilei','astronomy'


*/
select t.first_name, t.last_name, c.course_name
from teacher t
join courses c on t.id = c.teacher_id;


/*
6. Retrieve a list of students and their enrollment dates for a specific course. You'll need to join 
the "Students" table with the "Enrollments" and "Courses" tables.


o/p: 
'penny','hofstadter','2024-01-15'


*/
select s.first_name, s.last_name, e.enrollment_date
from students s
join enrollment e on s.id = e.students_id
join courses c on e.courses_id = c.id
where c.course_name = 'engineering';


/*
7. Find the names of students who have not made any payments. Use a LEFT JOIN between the "Students" table and the "Payments" table 
and filter for students with NULL payment records.


o/p:
'john','doe'


*/
select s.first_name, s.last_name
from students s
left join payments p on s.id = p.students_id
where p.students_id is null;


/*
8. Write a query to identify courses that have no enrollments. You'll need to use a LEFT JOIN between the "Courses" table 
and the "Enrollments" table and filter for courses with NULL enrollment records.


o/p: 
'chemistry'


*/
select c.course_name
from courses c
left join enrollment e on c.id = e.courses_id
where e.courses_id is null;


/*
9. Identify students who are enrolled in more than one course. Use a self-join on the "Enrollments" table 
to find students with multiple enrollment records.


o/p: 
'sheldon','cooper'


*/
select distinct s.first_name, s.last_name
from students s
join enrollment e1 ON s.id = e1.students_id
join enrollment e2 ON s.id = e2.students_id AND e1.id != e2.id;




/*
10. Find teachers who are not assigned to any courses. Use a LEFT JOIN between the "Teacher" table and the "Courses" table and
 filter for teachers with NULL course assignments.


 o/p: 
 'stephen','hawking'


*/
select t.first_name, t.last_name
from teacher t
left join courses c on t.id = c.teacher_id
where c.teacher_id is null;


/*TASK 4
1. Write an SQL query to calculate the average number of students enrolled in each course. 
Use aggregate functions and subqueries to achieve this.


o/p: 
'physics','1.0000'
'engineering','1.0000'
'astronomy','1.0000'
'experimental physics','1.0000'
'quantum mechanics','2.0000'


*/


select c.course_name, avg(enrollment_count) as average_students_enrolled
from courses c
join (select courses_id, count(*) as enrollment_count from enrollment group by courses_id) as enrollments
on c.id = enrollments.courses_id
group by c.course_name;


/*
2. Identify the student(s) who made the highest payment. Use a subquery to find the maximum payment amount and
 then retrieve the student(s) associated with that amount.


 o/p: 'rajesh','koothrappali','16000'


*/
select s.id, s.first_name, s.last_name, p.amount as highest_payment
from students s
join payments p on s.id = p.students_id
where amount = (select max(amount) from payments);


/*
3. Retrieve a list of courses with the highest number of enrollments. Use subqueries to find the course(s) with the maximum enrollment count.




o/p: 


'quantum mechanics'


*/
select c.course_name from courses c
join enrollment e on c.id = e.courses_id
group by c.course_name
having count(e.students_id) = (
    select max(enrollment_count)
    from (
        select courses_id, count(courses_id) as enrollment_count
        from enrollment
        group by courses_id
    ) as max_counts
);






/*
4. Calculate the total payments made to courses taught by each teacher. Use subqueries to sum payments for each teacher's courses.


o/p: 
'albert','einstein','16000'
'isaac','newton','36000'
'galileo','galilei','27000'


*/
select t.first_name, t.last_name, sum(p.amount) as total_payments
from teacher t
join courses c on t.id = c.teacher_id
join enrollment e on c.id = e.courses_id
join payments p on e.students_id = p.students_id
group by t.id;


/*
5. Identify students who are enrolled in all available courses. 
Use subqueries to compare a student's enrollments with the total number of courses.


o/p: 
'leonard','hofstadter','1'
'sheldon','cooper','2'
'penny','hofstadter','1'
'howard','wolowitz','1'
'rajesh','koothrappali','1'


*/
select s.first_name, s.last_name, count(distinct c.id) as total_courses_enrolled
from students s
join enrollment e on s.id = e.students_id
join courses c on e.courses_id = c.id
group by s.id;


-- enrolled in all available courses
/*
o/p: Empty set (0.01 sec)
*/
select s.first_name, s.last_name, count(distinct c.id) as total_courses_enrolled
from students s
join enrollment e on s.id = e.students_id
join courses c on e.courses_id = c.id
group by s.id
having count(distinct c.id) = (
    select count(*) from courses
);


/*
6. Retrieve the names of teachers who have not been assigned to any courses. Use subqueries to find teachers with no course assignments.


o/p: 
'stephen','hawking'


*/
select t.first_name, t.last_name
from teacher t
where not exists (
    select *
    from courses c
    where c.teacher_id = t.id
);


/*
7. Calculate the average age of all students. Use subqueries to calculate the age of each student based on their date of birth.


o/p: 
'39.8333'


*/
select avg(age) as average_age
from (
    select timestampdiff(year, date_of_birth, current_date) as age
    from students
) as student_ages;


/*
8. Identify courses with no enrollments. Use subqueries to find courses without enrollment records.


o/p: 
'chemistry'


*/
select c.course_name
from courses c
left join enrollment e on c.id = e.courses_id
where e.courses_id is null;


/*
9. Calculate the total payments made by each student for each course they are enrolled in. Use subqueries and
 aggregate functions to sum payments.
 
 o/p: 
'leonard','hofstadter','physics','11000'
'leonard','hofstadter','physics','11000'
'sheldon','cooper','astronomy','16000'
'penny','hofstadter','engineering','12000'
'howard','wolowitz','quantum mechanics','8000'
'rajesh','koothrappali','experimental physics','16000'
'sheldon','cooper','quantum mechanics','16000'


*/
select s.first_name, s.last_name, c.course_name, SUM(p.amount) AS total_payments
from students s
join enrollment e ON s.id = e.students_id
join courses c ON e.courses_id = c.id
join payments p ON s.id = p.students_id
group by s.id, c.id, c.course_name;


/*
10. Identify students who have made more than one payment. Use subqueries and aggregate functions to count payments per student and
 filter for those with counts greater than one.


 o/p: 
 'sheldon','cooper'


*/
select s.first_name, s.last_name
from students s
join payments p on s.id = p.students_id
group by s.id
having count(*) > 1;


/*
11. Write an SQL query to calculate the total payments made by each student. Join the "Students" table with the "Payments" table and
 use GROUP BY to calculate the sum of payments for each student.
 
 o/p:
 'leonard','hofstadter','11000'
'sheldon','cooper','16000'
'penny','hofstadter','12000'
'howard','wolowitz','8000'
'rajesh','koothrappali','16000'
'john','doe',NULL


*/
select s.first_name, s.last_name, sum(p.amount) as total_payments
from students s
left join payments p on s.id = p.students_id
group by s.id;


/*
12. Retrieve a list of course names along with the count of students enrolled in each course. 
Use JOIN operations between the "Courses" table and the "Enrollments" table and GROUP BY to count enrollments.


o/p: 
'physics','1'
'engineering','1'
'astronomy','1'
'experimental physics','1'
'quantum mechanics','2'
'chemistry','0'


*/
select c.course_name, count(e.students_id) as count_of_students
from courses c
left join enrollment e on c.id = e.courses_id
group by c.course_name;


/*
13. Calculate the average payment amount made by students. Use JOIN operations between the "Students" table and
 the "Payments" table and GROUP BY to calculate the average.
 
 o/p: 
'leonard','hofstadter','11000'
'sheldon','cooper','8500'
'penny','hofstadter','12000'
'howard','wolowitz','8000'
'rajesh','koothrappali','16000'


*/
select s.first_name, s.last_name, AVG(p.amount) AS average_payment_amount
from students s
join payments p ON s.id = p.students_id
group by s.id;


/*
o/p: 
'10666.666666666666'
*/
select avg(amount) as average_payment_amount
from payments;