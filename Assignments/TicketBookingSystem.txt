use TicketBookingSystem;


show tables;


describe venue;


insert into customer(customer_name,email,phone_number)
values
('harry potter','harry@gmail.com','45454545'),
('ronald weasley','ron@gmail.com','45454545'),
('hermione granger','her@gmail.com','45454545'),
('draco malfoy','drac@gmail.com','45454545'),
('ginni weasley','ginni@gmail.com','45454545');


insert into venue(venue_name,address) values
('mumbai', 'marol andheri(w)'),
('chennai', 'IT Park'),
('pondicherry ', 'state beach');


insert into
event(event_name,event_date,event_time,total_seats,available_seats,ticket_price,event_type,venue_id)
values
('Late Ms. Lata Mangeshkar Musical', '2021-09-12','20:00',320,270,600,'concert',3),
('CSK vs RCB', '2024-04-11','19:30',23000,3,3600,'sports',2),
('CSK vs RR', '2024-04-19','19:30',23000,10,3400,'sports',2),
('MI vs KKR', '2024-05-01','15:30',28000,100,8000,'sports',1);






insert into
event(id,event_name,event_date,event_time,total_seats,available_seats,ticket_price,event_type,venue_id)
values
(4, 'Late Ms. Lata Mangeshkar Musical', '2021-09-12','20:00',320,270,600,'concert',3),
(5, 'CSK vs RCB', '2024-04-11','19:30',23000,3,3600,'sports',2),
(6, 'CSK vs RR', '2024-04-19','19:30',23000,10,3400,'sports',2),
(7, 'Conferece CUP', '2024-05-01','15:30',28000,99,8000,'sports',1);




insert into booking values
(4,1,2,640,'2021-09-12'),
(4,4,3,960,'2021-09-12'),
(5,1,3,10800,'2024-04-11'),
(5,3,5,18000,'2024-04-10'),
(6,5,10,34000,'2024-04-15'),
(7,2,4,32000,'2024-05-01');


 -- additional values for customer table
insert into customer(customer_name,email,phone_number)
values
('severus snape','sev@gmail.com','56556'),
('frodo baggins','frodo@lotr.com','35454');




select * from venue;
select * from event;
select * from booking;
select * from customer;


/* 
Tasks 2: Select, Where, Between, AND, LIKE:
﻿Write a SQL query to insert at least 10 sample records into each table.
*/


-- 2. Write a SQL query to list all Events
/*
O/P: 
+----------------------------------+------------+
| event_name                       | event_type |
+----------------------------------+------------+
| Late Ms. Lata Mangeshkar Musical | concert    |
| CSK vs RCB                       | sports     |
| CSK vs RR                        | sports     |
| Conferece CUP                    | sports     |
+----------------------------------+------------+
4 rows in set (0.00 sec)
*/
select event_name,event_type from event;


-- ﻿3. Write a SQL query to select events with available tickets.
/*
O/P: 
+----------------------------------+-----------------+
| event_name                       | available_seats |
+----------------------------------+-----------------+
| Late Ms. Lata Mangeshkar Musical |             270 |
| CSK vs RCB                       |               3 |
| CSK vs RR                        |              10 |
| Conferece CUP                    |              99 |
+----------------------------------+-----------------+
4 rows in set (0.01 sec)
*/
select event_name, available_seats from event where available_seats > 0;


-- ﻿4. Write a SQL query to select events name partial match with 'cup'.
/*
O/P: 
+---------------+
| event_name    |
+---------------+
| Conferece CUP |
+---------------+
1 row in set (0.00 sec)
*/
select event_name from event where event_name like '%cup%';


-- 5. Write a SQL query to select events with ticket price range is between 1000 to 5000.
/*
O/P: 
+------------+--------------+
| event_name | ticket_price |
+------------+--------------+
| CSK vs RCB |         3600 |
| CSK vs RR  |         3400 |
+------------+--------------+
2 rows in set (0.00 sec)
*/
select event_name,ticket_price from event where ticket_price between 1000 and 5000;


-- ﻿6. Write a SQL query to retrieve events with dates falling within a specific range.
/*
O/P: 
+------------+------------+
| event_name | event_date |
+------------+------------+
| CSK vs RCB | 2024-04-11 |
| CSK vs RR  | 2024-04-19 |
+------------+------------+
2 rows in set (0.00 sec)
*/
select event_name, event_date from event where event_date between '2024-04-10' and '2024-04-20';


-- ﻿7. Write a SQL query to retrieve events with available tickets that also have "Concert" in their name.
/*
O/P: 
Empty set (0.00 sec)
*/
select event_name, available_seats from event where available_seats > 0 and event_name like '%concert%';




-- ﻿8. Write a SQL query to retrieve users in batches of 5, starting from the 6th user.
/*
O/P: 
+----+---------------+----------------+--------------+
| id | customer_name | email          | phone_number |
+----+---------------+----------------+--------------+
|  6 | severus snape | sev@gmail.com  | 56556        |
|  7 | frodo baggins | frodo@lotr.com | 35454        |
+----+---------------+----------------+--------------+
2 rows in set (0.00 sec)
*/
select * from customer limit 5,5;        


-- ﻿9. Write a SQL query to retrieve bookings details contains booked no of ticket more than 4.
/*
O/P: 
+----------+-------------+-------------+------------+--------------+
| event_id | customer_id | num_tickets | total_cost | booking_date |
+----------+-------------+-------------+------------+--------------+
|        5 |           3 |           5 |      18000 | 2024-04-10   |
|        6 |           5 |          10 |      34000 | 2024-04-15   |
+----------+-------------+-------------+------------+--------------+
2 rows in set (0.00 sec)


*/
select * from booking where num_tickets > 4;


-- ﻿﻿10. Write a SQL query to retrieve customer information whose phone number end with '000'
/*
O/P: 
Empty set (0.00 sec)
*/
select * from customer where phone_number like '%000';


-- ﻿﻿11. Write a SQL query to retrieve the events in order whose seat capacity more than 15000.
/*
+---------------+-------------+
| event_name    | total_seats |
+---------------+-------------+
| CSK vs RCB    |       23000 |
| CSK vs RR     |       23000 |
| Conferece CUP |       28000 |
+---------------+-------------+
3 rows in set (0.00 sec)
select event_name, total_seats from event where total_seats > 15000 order by total_seats;


-- 12. Write a SQL query to select events name not start with 'x', 'Y', 'z'
/*
O/P: 
+----------------------------------+
| event_name                       |
+----------------------------------+
| Late Ms. Lata Mangeshkar Musical |
| CSK vs RCB                       |
| CSK vs RR                        |
| Conferece CUP                    |
+----------------------------------+
4 rows in set (0.00 sec)


*/
select event_name from event where not (event_name like 'x%' or event_name like 'Y%' or event_name like 'z%');


/*
Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins:
1. ﻿Write a SQL query to List Events and Their Average Ticket Prices.


O/P: 
+----------------------------------+----------------------+
| event_name                       | average_ticket_price |
+----------------------------------+----------------------+
| Late Ms. Lata Mangeshkar Musical |                  800 |
| CSK vs RCB                       |                14400 |
| CSK vs RR                        |                34000 |
| Conferece CUP                    |                32000 |
+----------------------------------+----------------------+
4 rows in set (0.00 sec)
*/
select e.event_name, avg(b.total_cost) as average_ticket_price
from event e, booking b
where e.id = b.event_id
group by e.event_name;


﻿-- 2. Write a SQL query to Calculate the Total Revenue Generated by Events.
/*
O/P: 
+---------------+
| total_revenue |
+---------------+
|        421200 |
+---------------+
1 row in set (0.01 sec)
*/
select sum(b.num_tickets * e.ticket_price) as total_revenue
from event e, booking b;


/*
O/P: 
+----------------------------------+---------------+
| event_name                       | total_revenue |
+----------------------------------+---------------+
| Late Ms. Lata Mangeshkar Musical |          3000 |
| CSK vs RCB                       |         28800 |
| CSK vs RR                        |         34000 |
| Conferece CUP                    |         32000 |
+----------------------------------+---------------+
4 rows in set (0.00 sec)
*/
select e.event_name, sum(b.num_tickets * e.ticket_price) as total_revenue
from event e, booking b
where e.id = b.event_id
group by e.event_name;


﻿-- 3. Write a SQL query to find the event with the highest ticket sales.
/*
O/P: 
+---------------+--------------+
| event_name    | Tickets_Sold |
+---------------+--------------+
| Conferece CUP |        27901 |
+---------------+--------------+
1 row in set (0.00 sec)
*/


select event_name, SUM(total_seats-available_seats) as Tickets_Sold
from event
group by event_name
order by tickets_sold desc
limit 1;




﻿-- 4. Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event.
/*
O/P: 
+----------------------------------+--------------+
| event_name                       | Tickets_Sold |
+----------------------------------+--------------+
| Late Ms. Lata Mangeshkar Musical |           50 |
| CSK vs RCB                       |        22997 |
| CSK vs RR                        |        22990 |
| Conferece CUP                    |        27901 |
+----------------------------------+--------------+
4 rows in set (0.00 sec)
*/


select event_name, SUM(total_seats-available_seats) as Tickets_Sold
from event
group by event_name;




﻿-- 5. Write a SQL query to Find Events with No Ticket Sales.
/*
O/P: 
Empty set (0.00 sec)
*/
select e.event_name
from event e
where e.id not in (select event_id from booking);




﻿-- 6. Write a SQL query to Find the User Who Has Booked the Most Tickets.
/*
O/P: 
+---------------+----------------------+
| customer_name | total_tickets_booked |
+---------------+----------------------+
| ginni weasley |                   10 |
+---------------+----------------------+
1 row in set (0.00 sec)
*/
select c.customer_name,
       sum(b.num_tickets) as total_tickets_booked
from customer c, booking b
where c.id = b.customer_id
group by b.customer_id
order by total_tickets_booked desc
limit 1;


﻿-- 7. Write a SQL query to List Events and the total number of tickets sold for each month.
/*
O/P: 
+-------+------+--------------------+----------------------------------+
| month | year | total_tickets_sold | event_name                       |
+-------+------+--------------------+----------------------------------+
|     9 | 2021 |                 50 | Late Ms. Lata Mangeshkar Musical |
|     4 | 2024 |              22997 | CSK vs RCB                       |
|     4 | 2024 |              22990 | CSK vs RR                        |
|     5 | 2024 |              27901 | Conferece CUP                    |
+-------+------+--------------------+----------------------------------+
4 rows in set (0.00 sec)
*/
select month(e.event_date) as month, year(e.event_date) as year, sum(total_seats-available_seats) as total_tickets_sold, e.event_name
from event e
group by month, year, e.event_name;


﻿-- 8. Write a SQL query to calculate the average Ticket Price for Events in Each Venue.
/*
O/P: 
+--------------+----------+----------------------+
| venue_name   | venue_id | average_ticket_price |
+--------------+----------+----------------------+
| mumbai       |        1 |                 8000 |
| chennai      |        2 |                 3500 |
| pondicherry  |        3 |                  600 |
+--------------+----------+----------------------+
3 rows in set (0.00 sec)
*/
select v.venue_name,
       e.venue_id,
       avg(e.ticket_price) as average_ticket_price
from venue v, event e
where v.id = e.venue_id
group by e.venue_id;




﻿-- 9. Write a SQL query to calculate the total Number of Tickets Sold for Each Event Type.
/*
O/P: 
+------------+--------------+
| event_type | Tickets_Sold |
+------------+--------------+
| concert    |           50 |
| sports     |        73888 |
+------------+--------------+
2 rows in set (0.00 sec)
*/


select event_type, SUM(total_seats-available_seats) as Tickets_Sold
from event
group by event_type;


-- 10. Write a SQL query to calculate the total Revenue Generated by Events in Each Year.
/*
O/P: 
+------+---------------+
| year | total_revenue |
+------+---------------+
| 2021 |          3000 |
| 2024 |         94800 |
+------+---------------+
2 rows in set (0.00 sec)
*/
select year(e.event_date) as year, sum((total_seats - available_seats) * e.ticket_price) as total_revenue
from event e
group by year(e.event_date);


-- 11. Write a SQL query to list users who have booked tickets for multiple events.
/*
O/P: 
+---------------+-------------+
| customer_name | customer_id |
+---------------+-------------+
| harry potter  |           1 |
+---------------+-------------+
1 row in set (0.00 sec)
*/
select c.customer_name,
       b.customer_id
from customer c, booking b
where c.id = b.customer_id
group by b.customer_id
having count(distinct b.event_id) > 1;




-- 12. Write a SQL query to calculate the Total Revenue Generated by Events for Each User.
/*
O/P: 
+-------------+---------------+
| customer_id | total_revenue |
+-------------+---------------+
|           1 |         12000 |
|           4 |          1800 |
|           3 |         18000 |
|           5 |         34000 |
|           2 |         32000 |
+-------------+---------------+
5 rows in set (0.00 sec)


*/
select b.customer_id, sum(b.num_tickets * e.ticket_price) as total_revenue
from booking b, event e
where b.event_id = e.id
group by b.customer_id;


-- 13. Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue.
/*
O/P: 
+--------------+----------+------------+----------------------+
| venue_name   | venue_id | event_type | average_ticket_price |
+--------------+----------+------------+----------------------+
| mumbai       |        1 | sports     |                 8000 |
| chennai      |        2 | sports     |                 3500 |
| pondicherry  |        3 | concert    |                  600 |
+--------------+----------+------------+----------------------+
3 rows in set (0.00 sec)
*/


select v.venue_name,
       e.venue_id,
       e.event_type,
       avg(e.ticket_price) as average_ticket_price
from event e, venue v
where e.venue_id = v.id
group by e.venue_id, e.event_type;




-- 14. Write a SQL query to list Users and the Total Number of Tickets Thev've Purchased in the Last 30 days.
/*
O/P: 
+------------------+-------------+-------------------------+
| customer_name    | customer_id | total_tickets_purchased |
+------------------+-------------+-------------------------+
| harry potter     |           1 |                       3 |
| hermione granger |           3 |                       5 |
| ginni weasley    |           5 |                      10 |
| ronald weasley   |           2 |                       4 |
+------------------+-------------+-------------------------+
4 rows in set (0.00 sec)
*/
select c.customer_name, 
       b.customer_id, 
       sum(b.num_tickets) as total_tickets_purchased
from customer c, booking b
where c.id = b.customer_id
      and b.booking_date >= curdate() - interval 30 day
group by b.customer_id;


select curdate(); -- 2024-04-11
/*
Tasks 4: Subquery and its types
﻿﻿1. ﻿Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.
O/P: 
+--------------+----------------------+
| venue_name   | average_ticket_price |
+--------------+----------------------+
| mumbai       |                 8000 |
| chennai      |                 3500 |
| pondicherry  |                  600 |
+--------------+----------------------+
3 rows in set (0.00 sec)
*/
select v.venue_name, 
(select avg(ticket_price) from event e where e.venue_id = v.id) as average_ticket_price 
from venue v;


-- using joins
select v.venue_name, AVG(e.ticket_price) as Average_Ticket_price 
from venue v JOIN event e ON v.id=e.venue_id group by v. venue_name;


-- 2. Find Events with More Than 50% of Tickets Sold using subquery.
/*
O/P: 
+---------------+
| event_name    |
+---------------+
| CSK vs RCB    |
| CSK vs RR     |
| Conferece CUP |
+---------------+
3 rows in set (0.00 sec)
*/
select event_name
from event
where (total_seats-available_seats) > (total_seats/2);


-- 3. Calculate the Total Number of Tickets Sold for Each Event.
/*
O/P: 
+----------------------------------+--------------+
| event_name                       | Tickets_Sold |
+----------------------------------+--------------+
| Late Ms. Lata Mangeshkar Musical |           50 |
| CSK vs RCB                       |        22997 |
| CSK vs RR                        |        22990 |
| Conferece CUP                    |        27901 |
+----------------------------------+--------------+
4 rows in set (0.00 sec)




*/
select event_name, SUM(total_seats-available_seats) as Tickets_Sold
from event
group by event_name;


﻿-- 4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.
/*
+----+---------------+
| id | customer_name |
+----+---------------+
|  6 | severus snape |
|  7 | frodo baggins |
+----+---------------+
2 rows in set (0.00 sec)
*/


select c.id, c.customer_name
from customer c
where NOT EXISTS (select distinct c.id
from booking b where c.id = b.customer_id);


select c.id, c.customer_name
from customer
where id NOT IN (select distinct c.id
from customer c JOIN booking b ON c.id = b.customer_id);




/* For ref (explained during training)
select *
from event
where total_seats>27000; -- 1 row


select *
from venue
where EXISTS (select *
from event
where total_seats>29000);
                                 */
-- 5. List Events with No Ticket Sales Using a NOT IN Subquery.
/*
O/P: 
Empty set (0.00 sec)
*/
select *
from event
where id NOT IN (select e.id
from event e JOIN booking b ON e.id = b.event_id);


-- 6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause.
/*
O/P: 
+----------------------------------+--------------------+
| event_name                       | Total_tickets_sold |
+----------------------------------+--------------------+
| Late Ms. Lata Mangeshkar Musical |                 50 |
| CSK vs RCB                       |              22997 |
| CSK vs RR                        |              22990 |
| Conferece CUP                    |              27901 |
+----------------------------------+--------------------+
4 rows in set (0.00 sec)
*/
select dt.event_name, SUM(dt.total_seats-dt.available_seats) as Total_tickets_sold
from (select * from event) as dt
group by event_name; 


/* Queries explained during training
select event_name, SUM(total_seats-available_seats) as Total_tickets_sold 
 from (select event_name, total_seats, available_seats from event e JOIN venue v ON e.venue_id=v.id 
 where venue_name IN ('mumbai', 'chennai')) as dt group by event_name;
 
 select event_name, SUM(total_seats-available_seats) as Total_tickets_sold 
 from event e JOIN venue v ON e. venue_id=v.id 
 where venue_name IN ('mumbai', 'chennai') group by event_name;  
 */
 
 
-- ﻿﻿﻿7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause.
/*
O/P: 
+---------------+
| event_name    |
+---------------+
| Conferece CUP |
+---------------+
1 row in set (0.00 sec)
*/
select event_name
from event
where ticket_price > (select avg(ticket_price) from event);




-- ﻿﻿﻿8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.
/*
O/P: 
+------------------+-----------------+
| customer_name    | SUM(total_cost) |
+------------------+-----------------+
| harry potter     |           11440 |
| draco malfoy     |             960 |
| hermione granger |           18000 |
| ginni weasley    |           34000 |
| ronald weasley   |           32000 |
+------------------+-----------------+
5 rows in set (0.00 sec)




*/
select c.customer_name, SUM(total_cost)
from booking b JOIN customer c ON b. customer_id = c.id
group by c. customer_name;


-- 9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.
/*
O/P: 
+----------------+
| customer_name  |
+----------------+
| ronald weasley |
+----------------+
1 row in set (0.01 sec)
*/
select distinct c.customer_name
from booking b
join customer c on b.customer_id = c.id
where b.event_id IN (select id from event where venue_id = 1);


/*
O/P: 
+------------------+
| customer_name    |
+------------------+
| harry potter     |
| hermione granger |
| ginni weasley    |
+------------------+
*/
select distinct c.customer_name
from booking b
join customer c on b.customer_id = c.id
where b.event_id IN (select id from event where venue_id = (select id from venue where venue_name = 'chennai'));


/*
O/P: 
+----------------+------------+
| customer_name  | venue_name |
+----------------+------------+
| ronald weasley | mumbai     |
+----------------+------------+
*/
select distinct c.customer_name, v.venue_name
from booking b
join customer c on b.customer_id = c.id
join event e on b.event_id = e.id
join venue v on e.venue_id = v.id
where v.venue_name = 'mumbai';




-- ﻿﻿﻿﻿10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY.
/*
O/P: 
+------------+--------------------+
| event_type | Total_tickets_sold |
+------------+--------------------+
| concert    |                 50 |
| sports     |              73888 |
+------------+--------------------+
2 rows in set (0.00 sec)


*/
select e.event_type, 
       (select sum(total_seats - available_seats) 
        from event 
        where event_type = e.event_type) as Total_tickets_sold
from (select distinct event_type from event) as e;




-- ﻿﻿﻿﻿11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE _FORMAT.
/*
O/P: 
+------------------+
| customer_name    |
+------------------+
| harry potter     |
| hermione granger |
| ginni weasley    |
+------------------+
3 rows in set (0.00 sec)
*/
select distinct c.customer_name
from customer c
where c.id IN (
    select b.customer_id
    from booking b
    where date_format(b.booking_date, '%Y-%m') = '2024-04'
);


-- 12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
/*
O/P: 
+--------------+----------------------+
| venue_name   | average_ticket_price |
+--------------+----------------------+
| mumbai       |                 8000 |
| chennai      |                 3500 |
| pondicherry  |                  600 |
+--------------+----------------------+
3 rows in set (0.00 sec)
*/
select v.venue_name, 
       (select avg(e.ticket_price) 
        from event e 
        where e.venue_id = v.id) as average_ticket_price
from venue v;






drop database TicketBookingSystem;