use BankingSystem;


insert into customer(first_name,last_name,dob) values 
('harry','potter','2002-03-21'),
('ronald','weasley','2001-02-10'),
('hermione','granger','2002-11-15');


insert into account(account_type,balance,customer_id) values 
('savings',50000,1) ,
('current',120000,2) ,
('zero_balance',100000,3),
('current',150000,1) ,
('savings',30000,3);


insert into transaction(transaction_type,amount,transaction_date,account_id) 
values 
('deposit', 10000, '2024-02-01',1),
('withdrawal', 5000, '2024-02-02',1),
('deposit', 20000, '2024-02-02',2),
('withdrawal', 8000, '2024-02-02',3),
('transfer', 20000, '2024-02-01',4),
('transfer', 7000, '2024-02-05',5);


select * from customer;
select * from account;
select * from transaction;
-- 
/*               
Task 2 : Write SQL queries for the following tasks
*/
-- 1. Write a SQL query to retrieve the name, account type, and email of all customers.
/*
O/P:
+------------+-----------+--------------+
| first_name | last_name | account_type |
+------------+-----------+--------------+
| harry      | potter    | savings      |
| harry      | potter    | current      |
| ronald     | weasley   | current      |
| hermione   | granger   | zero_balance |
| hermione   | granger   | savings      |
+------------+-----------+--------------+
5 rows in set (0.00 sec)
*/
select c.first_name, c.last_name, a.account_type
from customer c
join account a on c.id = a.customer_id;




-- 2. Write a SQL query to list all transactions corresponding to each customer.
/*
O/P:
+------------+-----------+------------------+--------+------------------+
| first_name | last_name | transaction_type | amount | transaction_date |
+------------+-----------+------------------+--------+------------------+
| harry      | potter    | deposit          |  10000 | 2024-02-01       |
| harry      | potter    | withdrawal       |   5000 | 2024-02-02       |
| harry      | potter    | transfer         |  20000 | 2024-02-01       |
| ronald     | weasley   | deposit          |  20000 | 2024-02-02       |
| hermione   | granger   | withdrawal       |   8000 | 2024-02-02       |
| hermione   | granger   | transfer         |   7000 | 2024-02-05       |
+------------+-----------+------------------+--------+------------------+
6 rows in set (0.00 sec)


*/
select c.first_name, c.last_name, t.transaction_type, t.amount, t.transaction_date
from customer c
join account a on c.id = a.customer_id
join transaction t on a.id = t.account_id;




-- 3. Write a SQL query to increase the balance of a specific account by a certain amount.
update account
set balance = balance + 5000
where id = 1;


update account
set balance = balance - 5000
where id = 1;




-- 4. Write a SQL query to combine the first and last names of customers as a full_name.
/*
O/P:
+------------------+
| full_name        |
+------------------+
| harry potter     |
| ronald weasley   |
| hermione granger |
+------------------+
3 rows in set (0.00 sec)
*/
select concat(c.first_name, ' ', c.last_name) as full_name
from customer c;


-- 5. Write a SQL query to remove accounts with a balance of zero where the account type is savings.


delete from account
where balance = 0
and account_type = 'savings';


-- 6. Write a SQL query to find customers living in a specific city.
/*
O/P:
City field is not defined in the table
*/
select first_name, last_name
from customer
where city = 'mumbai';


-- 7. Write a SQL query to get the account balance for a specific account.
/*
O/P:
+---------+
| balance |
+---------+
|  100000 |
+---------+
1 row in set (0.00 sec)
*/
select balance
from account
where id = 3;


-- 8. Write a SQL query to list all current accounts with a balance greater than $1,000.
/*
O/P:
+----+--------------+---------+-------------+
| id | account_type | balance | customer_id |
+----+--------------+---------+-------------+
|  2 | current      |  120000 |           2 |
|  4 | current      |  150000 |           1 |
+----+--------------+---------+-------------+
2 rows in set (0.00 sec)
*/
select *
from account
where account_type = 'current'
and balance > 1000;


-- 9. Write a SQL query to retrieve all transactions for a specific account.
/*
O/P:
+----+------------------+--------+------------------+------------+
| id | transaction_type | amount | transaction_date | account_id |
+----+------------------+--------+------------------+------------+
|  1 | deposit          |  10000 | 2024-02-01       |          1 |
|  2 | withdrawal       |   5000 | 2024-02-02       |          1 |
+----+------------------+--------+------------------+------------+
2 rows in set (0.00 sec)


*/
select *
from transaction
where account_id = 1;


-- 10. Write a SQL query to calculate the interest accrued on savings accounts based on a given interest rate.
/*
O/P:
+----+----------+
| id | interest |
+----+----------+
|  1 |     2500 |
|  5 |     1500 |
+----+----------+
2 rows in set (0.00 sec)
*/
select id,balance * 0.05 as interest
from account
where account_type = 'savings';


-- 11. Write a SQL query to identify accounts where the balance is less than a specified overdraft limit.
/*
O/P:
Empty set (0.00 sec)
*/
select *
from account
where balance < -5000;


-- 12. Write a SQL query to find customers not living in a specific city.
/*
O/P:
City field is not defined in the table
*/
select first_name, last_name
from customer
where city != 'chennai';




-- Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins:
-- 1. Write a SQL query to Find the average account balance for all customers.
/*
O/P:
+-------------------------+
| average_account_balance |
+-------------------------+
|                   90000 |
+-------------------------+
1 row in set (0.00 sec)
*/
select avg(balance) as average_account_balance
from account;


-- 2. Write a SQL query to Retrieve the top 10 highest account balances.
/*
O/P:
+----+--------------+---------+-------------+
| id | account_type | balance | customer_id |
+----+--------------+---------+-------------+
|  4 | current      |  150000 |           1 |
|  2 | current      |  120000 |           2 |
|  3 | zero_balance |  100000 |           3 |
|  1 | savings      |   50000 |           1 |
|  5 | savings      |   30000 |           3 |
+----+--------------+---------+-------------+
5 rows in set (0.00 sec)
*/
select *
from account
order by balance desc
limit 10;


-- 3. Write a SQL query to Calculate Total Deposits for All Customers in specific date.
/*
O/P:
+------------+----------------+
| date       | total_deposits |
+------------+----------------+
| 2024-02-01 |          10000 |
+------------+----------------+
1 row in set (0.00 sec)




*/
select transaction_date as date, sum(amount) as total_deposits
from transaction
where transaction_type = 'deposit'
and transaction_date = '2024-02-01';


-- 4. Write a SQL query to Find the Oldest and Newest Customers.
/*
O/P:
+----+------------+-----------+------------+
| id | first_name | last_name | dob        |
+----+------------+-----------+------------+
|  2 | ronald     | weasley   | 2001-02-10 |
+----+------------+-----------+------------+
1 row in set (0.00 sec)
*/
select * 
from customer
order by dob asc
limit 1;
/*
O/P:
+----+------------+-----------+------------+
| id | first_name | last_name | dob        |
+----+------------+-----------+------------+
|  3 | hermione   | granger   | 2002-11-15 |
+----+------------+-----------+------------+
1 row in set (0.00 sec)
*/
select * 
from customer
order by dob desc
limit 1;


-- 5. Write a SQL query to Retrieve transaction details along with the account type.
/*
O/P:
+----+------------------+--------+------------------+------------+--------------+
| id | transaction_type | amount | transaction_date | account_id | account_type |
+----+------------------+--------+------------------+------------+--------------+
|  3 | deposit          |  20000 | 2024-02-02       |          2 | current      |
|  5 | transfer         |  20000 | 2024-02-01       |          4 | current      |
|  1 | deposit          |  10000 | 2024-02-01       |          1 | savings      |
|  2 | withdrawal       |   5000 | 2024-02-02       |          1 | savings      |
|  6 | transfer         |   7000 | 2024-02-05       |          5 | savings      |
|  4 | withdrawal       |   8000 | 2024-02-02       |          3 | zero_balance |
+----+------------------+--------+------------------+------------+--------------+
6 rows in set (0.00 sec)


*/
select t.*, a.account_type
from transaction t
join account a on t.account_id = a.id order by account_type asc;


-- 6. Write a SQL query to Get a list of customers along with their account details.
/*
O/P:
+----+------------+-----------+------------+--------------+---------+
| id | first_name | last_name | dob        | account_type | balance |
+----+------------+-----------+------------+--------------+---------+
|  1 | harry      | potter    | 2002-03-21 | savings      |   50000 |
|  1 | harry      | potter    | 2002-03-21 | current      |  150000 |
|  2 | ronald     | weasley   | 2001-02-10 | current      |  120000 |
|  3 | hermione   | granger   | 2002-11-15 | zero_balance |  100000 |
|  3 | hermione   | granger   | 2002-11-15 | savings      |   30000 |
+----+------------+-----------+------------+--------------+---------+
5 rows in set (0.00 sec)
*/
select c.*, a.account_type, a.balance
from customer c
join account a on c.id = a.customer_id;


-- 7. Write a SQL query to Retrieve transaction details along with customer information for a specific account.
/*
O/P:
+----+------------+-----------+------------+----+------------------+--------+------------------+------------+
| id | first_name | last_name | dob        | id | transaction_type | amount | transaction_date | account_id |
+----+------------+-----------+------------+----+------------------+--------+------------------+------------+
|  1 | harry      | potter    | 2002-03-21 |  1 | deposit          |  10000 | 2024-02-01       |          1 |
|  1 | harry      | potter    | 2002-03-21 |  2 | withdrawal       |   5000 | 2024-02-02       |          1 |
+----+------------+-----------+------------+----+------------------+--------+------------------+------------+
2 rows in set (0.01 sec)
*/
select c.*, t.*
from customer c
join account a on c.id = a.customer_id
join transaction t on a.id = t.account_id
where t.account_id = 1;


-- 8. Write a SQL query to Identify customers who have more than one account.
/*
O/P:
+------------+-----------+
| first_name | last_name |
+------------+-----------+
| harry      | potter    |
| hermione   | granger   |
+------------+-----------+
2 rows in set (0.00 sec)
*/
select c.first_name, c.last_name
from customer c
join account a on c.id = a.customer_id
group by c.id
having count(a.id) > 1;


-- 9. Write a SQL query to Calculate the difference in transaction amounts between deposits and withdrawals.
/*
O/P:
+------------+------------+
| account_id | difference |
+------------+------------+
|          1 |       5000 |
|          2 |      20000 |
|          3 |      -8000 |
|          4 |          0 |
|          5 |          0 |
+------------+------------+
5 rows in set (0.00 sec)
*/


select account_id, SUM(IF(transaction_type = 'deposit', amount, 0)) - SUM(IF(transaction_type = 'withdrawal', amount, 0)) AS difference
from transaction 
group by account_id;


select account_id, 
sum(case when transaction_type = 'deposit' then amount else 0 end) - sum(case when transaction_type = 'withdrawal' then amount else 0 end) as difference
from transaction
group by account_id;


-- 10. Write a SQL query to Calculate the average daily balance for each account over a specified period.
/*
O/P:
+------------------+-----------------+
| transaction_date | AVG(a. balance) |
+------------------+-----------------+
| 2024-02-01       |          100000 |
| 2024-02-02       |           90000 |
| 2024-02-05       |           30000 |
+------------------+-----------------+
3 rows in set (0.00 sec)


*/
select t.transaction_date,AVG(a. balance)
from account a JOIN transaction t ON t.account_id = a.id
group by t.transaction_date;


-- 11. Calculate the total balance for each account type.
/*
O/P:
+--------------+---------------+
| account_type | total_balance |
+--------------+---------------+
| savings      |         80000 |
| current      |        270000 |
| zero_balance |        100000 |
+--------------+---------------+
3 rows in set (0.00 sec)
*/
select account_type,
    sum(balance) as total_balance
from account
group by account_type;


-- 12. Identify accounts with the highest number of transactions order by descending order.
/*
O/P:
+------------+-------------------+
| account_id | transaction_count |
+------------+-------------------+
|          1 |                 2 |
|          2 |                 1 |
|          3 |                 1 |
|          4 |                 1 |
|          5 |                 1 |
+------------+-------------------+
5 rows in set (0.00 sec)
*/
select account_id, 
    count(*) as transaction_count
from transaction
group by account_id
order by transaction_count desc;




-- 13. List customers with high aggregate account balances, along with their account types.
/*
O/P:
+------------+---------------------------+
| first_name | aggregate_account_balance |
+------------+---------------------------+
| harry      |                    200000 |
| hermione   |                    130000 |
| ronald     |                    120000 |
+------------+---------------------------+
3 rows in set (0.00 sec)


*/
select c.first_name, SUM(a.balance) as 'aggregate_account_balance'
from account a JOIN customer c ON a.customer_id = c.id
group by c.first_name
order by aggregate_account_balance desc;


-- 14. Identify and list duplicate transactions based on transaction amount, date, and account
/*
O/P:
+------------------+--------+------------+-----------------+
| transaction_date | amount | account_id | duplicate_count |
+------------------+--------+------------+-----------------+
| 2024-02-01       |  10000 |          1 |               2 |
+------------------+--------+------------+-----------------+
1 row in set (0.00 sec)
*/
select transaction_date, amount, account_id, count(*) as duplicate_count
from transaction
group by transaction_date, amount, account_id
having count(*) > 1;


-- adding duplicates
insert into transaction(id,transaction_type,amount,transaction_date,account_id) 
values 
(10,'deposit', 10000, '2024-02-01',1);


delete from transaction where id=10;


select * from transaction;


-- Task 4: Subquery and its type:
-- 1. Retrieve the customer(s) with the highest account balance.
/*
O/P:
+----+------------+-----------+------------+
| id | first_name | last_name | dob        |
+----+------------+-----------+------------+
|  1 | harry      | potter    | 2002-03-21 |
+----+------------+-----------+------------+
1 row in set (0.00 sec)
*/
select *
from customer
where id = (select customer_id 
            from account 
            order by balance desc 
            limit 1);


-- 2. Calculate the average account balance for customers who have more than one account.
/*
O/P:
+-------------------------+
| average_account_balance |
+-------------------------+
|                   82500 |
+-------------------------+
1 row in set (0.00 sec)
*/
select avg(balance) as average_account_balance
from account
where customer_id in (select customer_id
                      from account
                      group by customer_id
                      having count(*) > 1);


-- 3. Retrieve accounts with transactions whose amounts exceed the average transaction amount.
/*
O/P:
+----+--------------+---------+-------------+
| id | account_type | balance | customer_id |
+----+--------------+---------+-------------+
|  2 | current      |  120000 |           2 |
|  4 | current      |  150000 |           1 |
+----+--------------+-----
*/
select *
from account
where id in (select account_id
             from transaction
             where amount > (select avg(amount) from transaction));


-- 4. Identify customers who have no recorded transactions.
/*
O/P:
Empty set (0.00 sec)
*/
select c.*
from customer c
left join account a on c.id = a.customer_id
left join transaction t on a.id = t.account_id
where t.id is null;




-- 5. Calculate the total balance of accounts with no recorded transactions.
/*
O/P:
+-------------------------------+
| total_balance_no_transactions |
+-------------------------------+
|                          NULL |
+-------------------------------+
*/
select sum(balance) as total_balance_no_transactions
from account
where id not in (select distinct account_id from transaction);


-- 6. Retrieve transactions for accounts with the lowest balance.
/*
O/P:
+----+------------------+--------+------------------+------------+
| id | transaction_type | amount | transaction_date | account_id |
+----+------------------+--------+------------------+------------+
|  6 | transfer         |   7000 | 2024-02-05       |          5 |
+----+------------------+--------+------------------+------------+
1 row in set (0.00 sec)
*/
select *
from transaction
where account_id = (select id
                     from account
                     order by balance
                     limit 1);


-- 7. Identify customers who have accounts of multiple types.
/*
O/P:
+----+------------+-----------+------------+
| id | first_name | last_name | dob        |
+----+------------+-----------+------------+
|  1 | harry      | potter    | 2002-03-21 |
|  3 | hermione   | granger   | 2002-11-15 |
+----+------------+-----------+------------+
2 rows in set (0.00 sec)
*/
select *
from customer
where id in (select customer_id
             from account
             group by customer_id
             having count(distinct account_type) > 1);


-- 8. Calculate the percentage of each account type out of the total number of accounts.
/*
O/P:
+--------------+------------+
| account_type | percentage |
+--------------+------------+
| savings      |   40.00000 |
| current      |   40.00000 |
| zero_balance |   20.00000 |
+--------------+------------+
3 rows in set (0.00 sec)
*/
select account_type, 
       count(*) * 100.0 / (select count(*) from account) as percentage
from account
group by account_type;


-- 9. Retrieve all transactions for a customer with a given customer_id.
/*
O/P:
+----+------------------+--------+------------------+------------+
| id | transaction_type | amount | transaction_date | account_id |
+----+------------------+--------+------------------+------------+
|  1 | deposit          |  10000 | 2024-02-01       |          1 |
|  2 | withdrawal       |   5000 | 2024-02-02       |          1 |
|  5 | transfer         |  20000 | 2024-02-01       |          4 |
+----+------------------+--------+------------------+------------+
3 rows in set (0.00 sec)
*/
select *
from transaction
where account_id in (select id
                     from account
                     where customer_id = 1);


-- 10. Calculate the total balance for each account type, including a subquery within the SELECT clause.
/*
O/P:
+--------------+---------------+
| account_type | total_balance |
+--------------+---------------+
| savings      |         80000 |
| current      |        270000 |
| zero_balance |        100000 |
+--------------+---------------+
3 rows in set (0.00 sec)
*/
select account_type, 
       (select sum(balance) 
        from account 
        where account_type = a.account_type) as total_balance
from (select distinct account_type from account) as a;


drop database BankingSystem;